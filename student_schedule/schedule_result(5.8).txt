import json
import os
from openpyxl import load_workbook, Workbook
import unicodedata
import re
from copy import copy


def _normalize_name(name: str) -> str:
    return unicodedata.normalize("NFKC", name.replace("　", " ")).strip()


class Schedule_result:
    def __init__(self, student_data, teacher_data, match_data, student_template, teacher_template):
        self.student_data = {_normalize_name(k): v for k, v in student_data.items()}
        self.teacher_data = {_normalize_name(k): v for k, v in teacher_data.items()}
        self.subject_data = match_data
        self.student_template = student_template
        self.teacher_template = teacher_template

        self.teacher_output_path = "output/teachers_schedule.xlsx"
        self.student_output_dirs = {
            'elementary': "output/students_elementary.xlsx",
            'middle': "output/students_middle.xlsx",
            'high': "output/students_high.xlsx",
        }
        self.schedule_data = []
        self.date_order = []
        self.time_to_row = {
            '13:00': 3, '13:30': 4, '14:00': 5, '14:30': 6,
            '15:00': 7, '15:30': 8, '16:00': 9, '16:30': 10,
            '17:00': 11, '17:30': 12, '18:00': 13, '18:30': 14,
            '19:00': 15, '19:30': 16, '20:00': 17, '20:30': 18,
            '21:00': 19
        }

    def run(self):
        self.generate_schedule()
        self.generate_teacher_excel()
        self.generate_student_excels()

    def generate_schedule(self):
        matched_pairs = set()
        teacher_daily_count = {}
        student_daily_count = {}

        for entry in self.subject_data:
            full_name = _normalize_name(entry.get('student_name', ''))
            grade = entry.get('grade', 'other')
            if full_name not in self.student_data:
                continue

            for subj in entry.get('subjects', []):
                if not isinstance(subj, dict):
                    continue

                subject = subj.get('name')
                raw_teacher = subj.get('teacher', '')
                teacher = _normalize_name(raw_teacher.get('name', '') if isinstance(raw_teacher, dict) else raw_teacher)
                subject_type = '特別' if subj.get('special_classes', 0) > 0 else '通常'

                if (full_name, teacher, subject) in matched_pairs:
                    continue

                student_avail = self.student_data.get(full_name, {}).get("schedule", {})
                teacher_avail = self.teacher_data.get(teacher, {}).get("schedule", {})

                if not teacher_avail:
                    continue

                for date in sorted(student_avail.keys()):
                    if date not in teacher_avail:
                        continue

                    teacher_daily = teacher_daily_count.setdefault(teacher, {})
                    student_daily = student_daily_count.setdefault(full_name, {})

                    if teacher_daily.get(date, 0) >= 2 or student_daily.get(date, 0) >= 2:
                        continue

                    for time_slot, is_free in student_avail[date].items():
                        if not is_free:
                            continue
                        teacher_is_free = teacher_avail[date].get(time_slot, False)

                        if teacher_is_free:
                            self.schedule_data.append({
                                'date': date,
                                'time': time_slot,
                                'student': full_name,
                                'teacher': teacher,
                                'subject': subject,
                                'type': subject_type,
                                'grade': grade
                            })

                            student_avail[date][time_slot] = False
                            teacher_avail[date][time_slot] = False
                            matched_pairs.add((full_name, teacher, subject))
                            teacher_daily[date] = teacher_daily.get(date, 0) + 1
                            student_daily[date] = student_daily.get(date, 0) + 1
                            break

        self.date_order = sorted({entry['date'] for entry in self.schedule_data})

    def generate_teacher_excel(self):
        wb_template = load_workbook(self.teacher_template)
        ws_template = wb_template.active

        wb = Workbook()
        ws_dummy = wb.active
        ws_dummy.title = "ToBeDeleted"
        has_real_sheet = False

        teachers = {entry['teacher'] for entry in self.schedule_data}

        for teacher in teachers:
            ws = wb.create_sheet(title=teacher[:30])
            self._copy_worksheet(ws_template, ws)
            has_real_sheet = True

            for entry in self.schedule_data:
                if entry['teacher'] != teacher:
                    continue
                row = self.time_to_row.get(entry['time'], -1)
                if row == -1:
                    continue
                col = self._date_to_col(entry['date'])
                cell = ws.cell(row=row, column=col)
                if cell.value:
                    cell.value += f"\n{entry['student']}:{entry['subject']}"
                else:
                    cell.value = f"{entry['student']}:{entry['subject']}"

        if has_real_sheet:
            wb.remove(wb["ToBeDeleted"])
            os.makedirs(os.path.dirname(self.teacher_output_path), exist_ok=True)
            wb.save(self.teacher_output_path)

    def generate_student_excels(self):
        grouped_students = {'elementary': [], 'middle': [], 'high': []}
        for entry in self.schedule_data:
            grade = entry['grade']
            if grade in grouped_students:
                grouped_students[grade].append(entry)

        for category, entries in grouped_students.items():
            if not entries:
                continue
            wb_template = load_workbook(self.student_template)
            ws_template = wb_template.active

            wb = Workbook()
            ws_dummy = wb.active
            ws_dummy.title = "ToBeDeleted"
            has_real_sheet = False
            students = {entry['student'] for entry in entries}

            for student in students:
                ws = wb.create_sheet(title=student[:30])
                self._copy_worksheet(ws_template, ws)
                has_real_sheet = True
                for entry in entries:
                    if entry['student'] != student:
                        continue
                    row = self.time_to_row.get(entry['time'], -1)
                    if row == -1:
                        continue
                    col = self._date_to_col(entry['date'])
                    ws.cell(row=row, column=col).value = entry['subject']
                    ws.cell(row=row, column=col + 1).value = entry['type']

            if has_real_sheet:
                wb.remove(wb["ToBeDeleted"])
                path = self.student_output_dirs[category]
                os.makedirs(os.path.dirname(path), exist_ok=True)
                wb.save(path)

    def _date_to_col(self, date_str):
        base_col = 3
        index = self.date_order.index(date_str)
        return base_col + index * 2

    def _copy_worksheet(self, source, target):
        for row in source.iter_rows():
            for cell in row:
                new_cell = target.cell(row=cell.row, column=cell.column, value=cell.value)
                if cell.has_style:
                    new_cell.font = copy(cell.font)
                    new_cell.border = copy(cell.border)
                    new_cell.fill = copy(cell.fill)
                    new_cell.number_format = copy(cell.number_format)
                    new_cell.protection = copy(cell.protection)
                    new_cell.alignment = copy(cell.alignment)
        if source.merged_cells:
            for merged in source.merged_cells.ranges:
                target.merge_cells(str(merged))
