import os
from collections import defaultdict
from openpyxl import Workbook

class Schedule_result:
    def __init__(self, student_data, teacher_data, match_data):
        self.student_data = student_data
        self.teacher_data = teacher_data
        self.match_map = match_data

        self.teacher_slots = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
        self.student_slots = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
        self.assigned = []
        self.times = ["13:10", "14:40", "16:30", "18:00", "19:30"]

        # Prepare the result directory path
        base_dir = os.path.dirname(os.path.abspath(__file__))
        self.result_dir = os.path.join(base_dir, "result")
        os.makedirs(self.result_dir, exist_ok=True)

    def run(self):
        self.prepare_slots()
        self.match()
        self.export_comprehensive()
        self.export_student_file()
        self.export_teacher_file()

    def prepare_slots(self):
        for slot in self.teacher_data:
            name, date, time = slot["Teacher name"], slot["Date"], slot["Time"]
            self.teacher_slots[name][date][time] = slot.get("Subject", [])

        for slot in self.student_data:
            name, date, time = slot["Student name"], slot["Date"], slot["Time"]
            self.student_slots[name][date][time] = slot.get("Subject", [])

    def match(self):
        for student in self.match_map:
            sname = student["student_name"]
            for subj in student["subjects"]:
                tname = subj["teacher"]
                subject = subj["name"]
                total = subj["regular_classes"] + subj["special_classes"]
                count = 0

                for date in sorted(self.teacher_slots[tname].keys()):
                    for time in sorted(self.teacher_slots[tname][date].keys()):
                        t_slots = self.teacher_slots[tname][date][time]
                        s_slots = self.student_slots[sname][date][time]

                        # Initialize slot if empty
                        if not t_slots:
                            self.teacher_slots[tname][date][time] = [subject]
                            self.student_slots[sname][date][time] = [subject]
                            self.assigned.append((sname, tname, subject, date, time))
                            count += 1

                        elif False in t_slots and False in s_slots:
                            idx = t_slots.index(False)
                            self.teacher_slots[tname][date][time][idx] = subject
                            self.student_slots[sname][date][time][idx] = subject
                            self.assigned.append((sname, tname, subject, date, time))
                            count += 1

                        if count >= total:
                            break
                    if count >= total:
                        break

    def export_comprehensive(self):
        wb = Workbook()
        ws = wb.active
        ws.title = "Schedule"
        ws.append(["Student", "Teacher", "Subject", "Date", "Time"])
        for sname, tname, subject, date, time in self.assigned:
            ws.append([sname, tname, subject, date, time])
        save_path = os.path.join(self.result_dir, "matched_schedule.xlsx")
        wb.save(save_path)
        print(f"✅ Exported {save_path}")

    def export_student_file(self):
        wb = Workbook()
        wb.remove(wb.active)
        student_data = defaultdict(list)
        for sname, tname, subject, date, time in self.assigned:
            student_data[sname].append((date, time, subject, tname))
        for sname, records in student_data.items():
            ws = wb.create_sheet(title=sname)
            ws.append(["Date", "Time", "Subject", "Teacher"])
            for row in sorted(records):
                ws.append(list(row))
        save_path = os.path.join(self.result_dir, "student_schedule.xlsx")
        wb.save(save_path)
        print(f"✅ Exported {save_path}")

    def export_teacher_file(self):
        wb = Workbook()
        wb.remove(wb.active)
        teacher_data = defaultdict(list)
        for sname, tname, subject, date, time in self.assigned:
            teacher_data[tname].append((date, time, subject, sname))
        for tname, records in teacher_data.items():
            ws = wb.create_sheet(title=tname)
            ws.append(["Date", "Time", "Subject", "Student"])
            for row in sorted(records):
                ws.append(list(row))
        save_path = os.path.join(self.result_dir, "teacher_schedule.xlsx")
        wb.save(save_path)
        print(f"✅ Exported {save_path}")

